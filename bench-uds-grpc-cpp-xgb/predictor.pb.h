// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: predictor.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_predictor_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_predictor_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_predictor_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_predictor_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_predictor_2eproto;
namespace predictor {
class PredictProcessedRequest;
class PredictProcessedRequestDefaultTypeInternal;
extern PredictProcessedRequestDefaultTypeInternal _PredictProcessedRequest_default_instance_;
class PredictRequest;
class PredictRequestDefaultTypeInternal;
extern PredictRequestDefaultTypeInternal _PredictRequest_default_instance_;
class PredictResponse;
class PredictResponseDefaultTypeInternal;
extern PredictResponseDefaultTypeInternal _PredictResponse_default_instance_;
}  // namespace predictor
PROTOBUF_NAMESPACE_OPEN
template<> ::predictor::PredictProcessedRequest* Arena::CreateMaybeMessage<::predictor::PredictProcessedRequest>(Arena*);
template<> ::predictor::PredictRequest* Arena::CreateMaybeMessage<::predictor::PredictRequest>(Arena*);
template<> ::predictor::PredictResponse* Arena::CreateMaybeMessage<::predictor::PredictResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace predictor {

// ===================================================================

class PredictRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:predictor.PredictRequest) */ {
 public:
  inline PredictRequest() : PredictRequest(nullptr) {}
  virtual ~PredictRequest();

  PredictRequest(const PredictRequest& from);
  PredictRequest(PredictRequest&& from) noexcept
    : PredictRequest() {
    *this = ::std::move(from);
  }

  inline PredictRequest& operator=(const PredictRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PredictRequest& operator=(PredictRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PredictRequest& default_instance();

  static inline const PredictRequest* internal_default_instance() {
    return reinterpret_cast<const PredictRequest*>(
               &_PredictRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PredictRequest& a, PredictRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PredictRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PredictRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PredictRequest* New() const final {
    return CreateMaybeMessage<PredictRequest>(nullptr);
  }

  PredictRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PredictRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PredictRequest& from);
  void MergeFrom(const PredictRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PredictRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "predictor.PredictRequest";
  }
  protected:
  explicit PredictRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_predictor_2eproto);
    return ::descriptor_table_predictor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kSexFieldNumber = 5,
    kTicketFieldNumber = 9,
    kCabinFieldNumber = 11,
    kEmbarkedFieldNumber = 12,
    kSurvivedFieldNumber = 1,
    kPassengerIdFieldNumber = 2,
    kPclassFieldNumber = 4,
    kAgeFieldNumber = 6,
    kSibSpFieldNumber = 7,
    kParchFieldNumber = 8,
    kFareFieldNumber = 10,
  };
  // string Name = 3;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string Sex = 5;
  void clear_sex();
  const std::string& sex() const;
  void set_sex(const std::string& value);
  void set_sex(std::string&& value);
  void set_sex(const char* value);
  void set_sex(const char* value, size_t size);
  std::string* mutable_sex();
  std::string* release_sex();
  void set_allocated_sex(std::string* sex);
  private:
  const std::string& _internal_sex() const;
  void _internal_set_sex(const std::string& value);
  std::string* _internal_mutable_sex();
  public:

  // string Ticket = 9;
  void clear_ticket();
  const std::string& ticket() const;
  void set_ticket(const std::string& value);
  void set_ticket(std::string&& value);
  void set_ticket(const char* value);
  void set_ticket(const char* value, size_t size);
  std::string* mutable_ticket();
  std::string* release_ticket();
  void set_allocated_ticket(std::string* ticket);
  private:
  const std::string& _internal_ticket() const;
  void _internal_set_ticket(const std::string& value);
  std::string* _internal_mutable_ticket();
  public:

  // string Cabin = 11;
  void clear_cabin();
  const std::string& cabin() const;
  void set_cabin(const std::string& value);
  void set_cabin(std::string&& value);
  void set_cabin(const char* value);
  void set_cabin(const char* value, size_t size);
  std::string* mutable_cabin();
  std::string* release_cabin();
  void set_allocated_cabin(std::string* cabin);
  private:
  const std::string& _internal_cabin() const;
  void _internal_set_cabin(const std::string& value);
  std::string* _internal_mutable_cabin();
  public:

  // string Embarked = 12;
  void clear_embarked();
  const std::string& embarked() const;
  void set_embarked(const std::string& value);
  void set_embarked(std::string&& value);
  void set_embarked(const char* value);
  void set_embarked(const char* value, size_t size);
  std::string* mutable_embarked();
  std::string* release_embarked();
  void set_allocated_embarked(std::string* embarked);
  private:
  const std::string& _internal_embarked() const;
  void _internal_set_embarked(const std::string& value);
  std::string* _internal_mutable_embarked();
  public:

  // int32 Survived = 1;
  void clear_survived();
  ::PROTOBUF_NAMESPACE_ID::int32 survived() const;
  void set_survived(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_survived() const;
  void _internal_set_survived(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 PassengerId = 2;
  void clear_passengerid();
  ::PROTOBUF_NAMESPACE_ID::int32 passengerid() const;
  void set_passengerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_passengerid() const;
  void _internal_set_passengerid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double Pclass = 4;
  void clear_pclass();
  double pclass() const;
  void set_pclass(double value);
  private:
  double _internal_pclass() const;
  void _internal_set_pclass(double value);
  public:

  // double Age = 6;
  void clear_age();
  double age() const;
  void set_age(double value);
  private:
  double _internal_age() const;
  void _internal_set_age(double value);
  public:

  // double SibSp = 7;
  void clear_sibsp();
  double sibsp() const;
  void set_sibsp(double value);
  private:
  double _internal_sibsp() const;
  void _internal_set_sibsp(double value);
  public:

  // double Parch = 8;
  void clear_parch();
  double parch() const;
  void set_parch(double value);
  private:
  double _internal_parch() const;
  void _internal_set_parch(double value);
  public:

  // double Fare = 10;
  void clear_fare();
  double fare() const;
  void set_fare(double value);
  private:
  double _internal_fare() const;
  void _internal_set_fare(double value);
  public:

  // @@protoc_insertion_point(class_scope:predictor.PredictRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sex_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ticket_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cabin_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr embarked_;
  ::PROTOBUF_NAMESPACE_ID::int32 survived_;
  ::PROTOBUF_NAMESPACE_ID::int32 passengerid_;
  double pclass_;
  double age_;
  double sibsp_;
  double parch_;
  double fare_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_predictor_2eproto;
};
// -------------------------------------------------------------------

class PredictProcessedRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:predictor.PredictProcessedRequest) */ {
 public:
  inline PredictProcessedRequest() : PredictProcessedRequest(nullptr) {}
  virtual ~PredictProcessedRequest();

  PredictProcessedRequest(const PredictProcessedRequest& from);
  PredictProcessedRequest(PredictProcessedRequest&& from) noexcept
    : PredictProcessedRequest() {
    *this = ::std::move(from);
  }

  inline PredictProcessedRequest& operator=(const PredictProcessedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PredictProcessedRequest& operator=(PredictProcessedRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PredictProcessedRequest& default_instance();

  static inline const PredictProcessedRequest* internal_default_instance() {
    return reinterpret_cast<const PredictProcessedRequest*>(
               &_PredictProcessedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PredictProcessedRequest& a, PredictProcessedRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PredictProcessedRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PredictProcessedRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PredictProcessedRequest* New() const final {
    return CreateMaybeMessage<PredictProcessedRequest>(nullptr);
  }

  PredictProcessedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PredictProcessedRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PredictProcessedRequest& from);
  void MergeFrom(const PredictProcessedRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PredictProcessedRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "predictor.PredictProcessedRequest";
  }
  protected:
  explicit PredictProcessedRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_predictor_2eproto);
    return ::descriptor_table_predictor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFeaturesFieldNumber = 1,
  };
  // repeated double Features = 1;
  int features_size() const;
  private:
  int _internal_features_size() const;
  public:
  void clear_features();
  private:
  double _internal_features(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_features() const;
  void _internal_add_features(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_features();
  public:
  double features(int index) const;
  void set_features(int index, double value);
  void add_features(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      features() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_features();

  // @@protoc_insertion_point(class_scope:predictor.PredictProcessedRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > features_;
  mutable std::atomic<int> _features_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_predictor_2eproto;
};
// -------------------------------------------------------------------

class PredictResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:predictor.PredictResponse) */ {
 public:
  inline PredictResponse() : PredictResponse(nullptr) {}
  virtual ~PredictResponse();

  PredictResponse(const PredictResponse& from);
  PredictResponse(PredictResponse&& from) noexcept
    : PredictResponse() {
    *this = ::std::move(from);
  }

  inline PredictResponse& operator=(const PredictResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PredictResponse& operator=(PredictResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PredictResponse& default_instance();

  static inline const PredictResponse* internal_default_instance() {
    return reinterpret_cast<const PredictResponse*>(
               &_PredictResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PredictResponse& a, PredictResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PredictResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PredictResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PredictResponse* New() const final {
    return CreateMaybeMessage<PredictResponse>(nullptr);
  }

  PredictResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PredictResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PredictResponse& from);
  void MergeFrom(const PredictResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PredictResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "predictor.PredictResponse";
  }
  protected:
  explicit PredictResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_predictor_2eproto);
    return ::descriptor_table_predictor_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPredictionFieldNumber = 1,
  };
  // double Prediction = 1;
  void clear_prediction();
  double prediction() const;
  void set_prediction(double value);
  private:
  double _internal_prediction() const;
  void _internal_set_prediction(double value);
  public:

  // @@protoc_insertion_point(class_scope:predictor.PredictResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double prediction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_predictor_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PredictRequest

// int32 Survived = 1;
inline void PredictRequest::clear_survived() {
  survived_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PredictRequest::_internal_survived() const {
  return survived_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PredictRequest::survived() const {
  // @@protoc_insertion_point(field_get:predictor.PredictRequest.Survived)
  return _internal_survived();
}
inline void PredictRequest::_internal_set_survived(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  survived_ = value;
}
inline void PredictRequest::set_survived(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_survived(value);
  // @@protoc_insertion_point(field_set:predictor.PredictRequest.Survived)
}

// int32 PassengerId = 2;
inline void PredictRequest::clear_passengerid() {
  passengerid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PredictRequest::_internal_passengerid() const {
  return passengerid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PredictRequest::passengerid() const {
  // @@protoc_insertion_point(field_get:predictor.PredictRequest.PassengerId)
  return _internal_passengerid();
}
inline void PredictRequest::_internal_set_passengerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  passengerid_ = value;
}
inline void PredictRequest::set_passengerid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_passengerid(value);
  // @@protoc_insertion_point(field_set:predictor.PredictRequest.PassengerId)
}

// string Name = 3;
inline void PredictRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& PredictRequest::name() const {
  // @@protoc_insertion_point(field_get:predictor.PredictRequest.Name)
  return _internal_name();
}
inline void PredictRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:predictor.PredictRequest.Name)
}
inline std::string* PredictRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:predictor.PredictRequest.Name)
  return _internal_mutable_name();
}
inline const std::string& PredictRequest::_internal_name() const {
  return name_.Get();
}
inline void PredictRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PredictRequest::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:predictor.PredictRequest.Name)
}
inline void PredictRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:predictor.PredictRequest.Name)
}
inline void PredictRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:predictor.PredictRequest.Name)
}
inline std::string* PredictRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PredictRequest::release_name() {
  // @@protoc_insertion_point(field_release:predictor.PredictRequest.Name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PredictRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:predictor.PredictRequest.Name)
}

// double Pclass = 4;
inline void PredictRequest::clear_pclass() {
  pclass_ = 0;
}
inline double PredictRequest::_internal_pclass() const {
  return pclass_;
}
inline double PredictRequest::pclass() const {
  // @@protoc_insertion_point(field_get:predictor.PredictRequest.Pclass)
  return _internal_pclass();
}
inline void PredictRequest::_internal_set_pclass(double value) {
  
  pclass_ = value;
}
inline void PredictRequest::set_pclass(double value) {
  _internal_set_pclass(value);
  // @@protoc_insertion_point(field_set:predictor.PredictRequest.Pclass)
}

// string Sex = 5;
inline void PredictRequest::clear_sex() {
  sex_.ClearToEmpty();
}
inline const std::string& PredictRequest::sex() const {
  // @@protoc_insertion_point(field_get:predictor.PredictRequest.Sex)
  return _internal_sex();
}
inline void PredictRequest::set_sex(const std::string& value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:predictor.PredictRequest.Sex)
}
inline std::string* PredictRequest::mutable_sex() {
  // @@protoc_insertion_point(field_mutable:predictor.PredictRequest.Sex)
  return _internal_mutable_sex();
}
inline const std::string& PredictRequest::_internal_sex() const {
  return sex_.Get();
}
inline void PredictRequest::_internal_set_sex(const std::string& value) {
  
  sex_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PredictRequest::set_sex(std::string&& value) {
  
  sex_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:predictor.PredictRequest.Sex)
}
inline void PredictRequest::set_sex(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sex_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:predictor.PredictRequest.Sex)
}
inline void PredictRequest::set_sex(const char* value,
    size_t size) {
  
  sex_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:predictor.PredictRequest.Sex)
}
inline std::string* PredictRequest::_internal_mutable_sex() {
  
  return sex_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PredictRequest::release_sex() {
  // @@protoc_insertion_point(field_release:predictor.PredictRequest.Sex)
  return sex_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PredictRequest::set_allocated_sex(std::string* sex) {
  if (sex != nullptr) {
    
  } else {
    
  }
  sex_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sex,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:predictor.PredictRequest.Sex)
}

// double Age = 6;
inline void PredictRequest::clear_age() {
  age_ = 0;
}
inline double PredictRequest::_internal_age() const {
  return age_;
}
inline double PredictRequest::age() const {
  // @@protoc_insertion_point(field_get:predictor.PredictRequest.Age)
  return _internal_age();
}
inline void PredictRequest::_internal_set_age(double value) {
  
  age_ = value;
}
inline void PredictRequest::set_age(double value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:predictor.PredictRequest.Age)
}

// double SibSp = 7;
inline void PredictRequest::clear_sibsp() {
  sibsp_ = 0;
}
inline double PredictRequest::_internal_sibsp() const {
  return sibsp_;
}
inline double PredictRequest::sibsp() const {
  // @@protoc_insertion_point(field_get:predictor.PredictRequest.SibSp)
  return _internal_sibsp();
}
inline void PredictRequest::_internal_set_sibsp(double value) {
  
  sibsp_ = value;
}
inline void PredictRequest::set_sibsp(double value) {
  _internal_set_sibsp(value);
  // @@protoc_insertion_point(field_set:predictor.PredictRequest.SibSp)
}

// double Parch = 8;
inline void PredictRequest::clear_parch() {
  parch_ = 0;
}
inline double PredictRequest::_internal_parch() const {
  return parch_;
}
inline double PredictRequest::parch() const {
  // @@protoc_insertion_point(field_get:predictor.PredictRequest.Parch)
  return _internal_parch();
}
inline void PredictRequest::_internal_set_parch(double value) {
  
  parch_ = value;
}
inline void PredictRequest::set_parch(double value) {
  _internal_set_parch(value);
  // @@protoc_insertion_point(field_set:predictor.PredictRequest.Parch)
}

// string Ticket = 9;
inline void PredictRequest::clear_ticket() {
  ticket_.ClearToEmpty();
}
inline const std::string& PredictRequest::ticket() const {
  // @@protoc_insertion_point(field_get:predictor.PredictRequest.Ticket)
  return _internal_ticket();
}
inline void PredictRequest::set_ticket(const std::string& value) {
  _internal_set_ticket(value);
  // @@protoc_insertion_point(field_set:predictor.PredictRequest.Ticket)
}
inline std::string* PredictRequest::mutable_ticket() {
  // @@protoc_insertion_point(field_mutable:predictor.PredictRequest.Ticket)
  return _internal_mutable_ticket();
}
inline const std::string& PredictRequest::_internal_ticket() const {
  return ticket_.Get();
}
inline void PredictRequest::_internal_set_ticket(const std::string& value) {
  
  ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PredictRequest::set_ticket(std::string&& value) {
  
  ticket_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:predictor.PredictRequest.Ticket)
}
inline void PredictRequest::set_ticket(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:predictor.PredictRequest.Ticket)
}
inline void PredictRequest::set_ticket(const char* value,
    size_t size) {
  
  ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:predictor.PredictRequest.Ticket)
}
inline std::string* PredictRequest::_internal_mutable_ticket() {
  
  return ticket_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PredictRequest::release_ticket() {
  // @@protoc_insertion_point(field_release:predictor.PredictRequest.Ticket)
  return ticket_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PredictRequest::set_allocated_ticket(std::string* ticket) {
  if (ticket != nullptr) {
    
  } else {
    
  }
  ticket_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ticket,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:predictor.PredictRequest.Ticket)
}

// double Fare = 10;
inline void PredictRequest::clear_fare() {
  fare_ = 0;
}
inline double PredictRequest::_internal_fare() const {
  return fare_;
}
inline double PredictRequest::fare() const {
  // @@protoc_insertion_point(field_get:predictor.PredictRequest.Fare)
  return _internal_fare();
}
inline void PredictRequest::_internal_set_fare(double value) {
  
  fare_ = value;
}
inline void PredictRequest::set_fare(double value) {
  _internal_set_fare(value);
  // @@protoc_insertion_point(field_set:predictor.PredictRequest.Fare)
}

// string Cabin = 11;
inline void PredictRequest::clear_cabin() {
  cabin_.ClearToEmpty();
}
inline const std::string& PredictRequest::cabin() const {
  // @@protoc_insertion_point(field_get:predictor.PredictRequest.Cabin)
  return _internal_cabin();
}
inline void PredictRequest::set_cabin(const std::string& value) {
  _internal_set_cabin(value);
  // @@protoc_insertion_point(field_set:predictor.PredictRequest.Cabin)
}
inline std::string* PredictRequest::mutable_cabin() {
  // @@protoc_insertion_point(field_mutable:predictor.PredictRequest.Cabin)
  return _internal_mutable_cabin();
}
inline const std::string& PredictRequest::_internal_cabin() const {
  return cabin_.Get();
}
inline void PredictRequest::_internal_set_cabin(const std::string& value) {
  
  cabin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PredictRequest::set_cabin(std::string&& value) {
  
  cabin_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:predictor.PredictRequest.Cabin)
}
inline void PredictRequest::set_cabin(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cabin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:predictor.PredictRequest.Cabin)
}
inline void PredictRequest::set_cabin(const char* value,
    size_t size) {
  
  cabin_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:predictor.PredictRequest.Cabin)
}
inline std::string* PredictRequest::_internal_mutable_cabin() {
  
  return cabin_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PredictRequest::release_cabin() {
  // @@protoc_insertion_point(field_release:predictor.PredictRequest.Cabin)
  return cabin_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PredictRequest::set_allocated_cabin(std::string* cabin) {
  if (cabin != nullptr) {
    
  } else {
    
  }
  cabin_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cabin,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:predictor.PredictRequest.Cabin)
}

// string Embarked = 12;
inline void PredictRequest::clear_embarked() {
  embarked_.ClearToEmpty();
}
inline const std::string& PredictRequest::embarked() const {
  // @@protoc_insertion_point(field_get:predictor.PredictRequest.Embarked)
  return _internal_embarked();
}
inline void PredictRequest::set_embarked(const std::string& value) {
  _internal_set_embarked(value);
  // @@protoc_insertion_point(field_set:predictor.PredictRequest.Embarked)
}
inline std::string* PredictRequest::mutable_embarked() {
  // @@protoc_insertion_point(field_mutable:predictor.PredictRequest.Embarked)
  return _internal_mutable_embarked();
}
inline const std::string& PredictRequest::_internal_embarked() const {
  return embarked_.Get();
}
inline void PredictRequest::_internal_set_embarked(const std::string& value) {
  
  embarked_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PredictRequest::set_embarked(std::string&& value) {
  
  embarked_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:predictor.PredictRequest.Embarked)
}
inline void PredictRequest::set_embarked(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  embarked_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:predictor.PredictRequest.Embarked)
}
inline void PredictRequest::set_embarked(const char* value,
    size_t size) {
  
  embarked_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:predictor.PredictRequest.Embarked)
}
inline std::string* PredictRequest::_internal_mutable_embarked() {
  
  return embarked_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PredictRequest::release_embarked() {
  // @@protoc_insertion_point(field_release:predictor.PredictRequest.Embarked)
  return embarked_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PredictRequest::set_allocated_embarked(std::string* embarked) {
  if (embarked != nullptr) {
    
  } else {
    
  }
  embarked_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), embarked,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:predictor.PredictRequest.Embarked)
}

// -------------------------------------------------------------------

// PredictProcessedRequest

// repeated double Features = 1;
inline int PredictProcessedRequest::_internal_features_size() const {
  return features_.size();
}
inline int PredictProcessedRequest::features_size() const {
  return _internal_features_size();
}
inline void PredictProcessedRequest::clear_features() {
  features_.Clear();
}
inline double PredictProcessedRequest::_internal_features(int index) const {
  return features_.Get(index);
}
inline double PredictProcessedRequest::features(int index) const {
  // @@protoc_insertion_point(field_get:predictor.PredictProcessedRequest.Features)
  return _internal_features(index);
}
inline void PredictProcessedRequest::set_features(int index, double value) {
  features_.Set(index, value);
  // @@protoc_insertion_point(field_set:predictor.PredictProcessedRequest.Features)
}
inline void PredictProcessedRequest::_internal_add_features(double value) {
  features_.Add(value);
}
inline void PredictProcessedRequest::add_features(double value) {
  _internal_add_features(value);
  // @@protoc_insertion_point(field_add:predictor.PredictProcessedRequest.Features)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
PredictProcessedRequest::_internal_features() const {
  return features_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
PredictProcessedRequest::features() const {
  // @@protoc_insertion_point(field_list:predictor.PredictProcessedRequest.Features)
  return _internal_features();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
PredictProcessedRequest::_internal_mutable_features() {
  return &features_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
PredictProcessedRequest::mutable_features() {
  // @@protoc_insertion_point(field_mutable_list:predictor.PredictProcessedRequest.Features)
  return _internal_mutable_features();
}

// -------------------------------------------------------------------

// PredictResponse

// double Prediction = 1;
inline void PredictResponse::clear_prediction() {
  prediction_ = 0;
}
inline double PredictResponse::_internal_prediction() const {
  return prediction_;
}
inline double PredictResponse::prediction() const {
  // @@protoc_insertion_point(field_get:predictor.PredictResponse.Prediction)
  return _internal_prediction();
}
inline void PredictResponse::_internal_set_prediction(double value) {
  
  prediction_ = value;
}
inline void PredictResponse::set_prediction(double value) {
  _internal_set_prediction(value);
  // @@protoc_insertion_point(field_set:predictor.PredictResponse.Prediction)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace predictor

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_predictor_2eproto
