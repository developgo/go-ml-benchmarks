// Code generated by go-featureprocessing DO NOT EDIT

package main

import (
	"sync"

	fp "github.com/nikolaydubina/go-featureprocessing/transformers"
)

// PassengerFeatureTransformer is a feature processor for Passenger.
// It was automatically generated by go-featureprocessing tool.
type PassengerFeatureTransformer struct {
	PClass   fp.Identity       `json:"PClass_identity"`
	Sex      fp.OneHotEncoder  `json:"Sex_onehot"`
	Age      fp.MinMaxScaler   `json:"Age_minmax"`
	SibSp    fp.QuantileScaler `json:"SibSp_quantile"`
	Parch    fp.Identity       `json:"Parch_identity"`
	Fare     fp.StandardScaler `json:"Fare_standard"`
	Cabin    fp.OrdinalEncoder `json:"Cabin_ordinal"`
	Embarked fp.OneHotEncoder  `json:"Embarked_onehot"`
}

// Fit fits transformer for each field
func (e *PassengerFeatureTransformer) Fit(s []Passenger) {
	if e == nil || len(s) == 0 {
		return
	}

	dataNum := make([]float64, len(s))
	dataStr := make([]string, len(s))

	for i, v := range s {
		dataNum[i] = float64(v.PClass)
	}

	e.PClass.Fit(dataNum)

	for i, v := range s {
		dataStr[i] = v.Sex
	}

	e.Sex.Fit(dataStr)

	for i, v := range s {
		dataNum[i] = float64(v.Age)
	}

	e.Age.Fit(dataNum)

	for i, v := range s {
		dataNum[i] = float64(v.SibSp)
	}

	e.SibSp.Fit(dataNum)

	for i, v := range s {
		dataNum[i] = float64(v.Parch)
	}

	e.Parch.Fit(dataNum)

	for i, v := range s {
		dataNum[i] = float64(v.Fare)
	}

	e.Fare.Fit(dataNum)

	for i, v := range s {
		dataStr[i] = v.Cabin
	}

	e.Cabin.Fit(dataStr)

	for i, v := range s {
		dataStr[i] = v.Embarked
	}

	e.Embarked.Fit(dataStr)

}

// Transform transforms struct into feature vector accordingly to transformers
func (e *PassengerFeatureTransformer) Transform(s *Passenger) []float64 {
	if s == nil || e == nil {
		return nil
	}
	features := make([]float64, e.NumFeatures())
	e.TransformInplace(features, s)
	return features
}

// TransformInplace transforms struct into feature vector accordingly to transformers, and does so inplace
func (e *PassengerFeatureTransformer) TransformInplace(dst []float64, s *Passenger) {
	if s == nil || e == nil || len(dst) != e.NumFeatures() {
		return
	}
	idx := 0

	dst[idx] = e.PClass.Transform(float64(s.PClass))
	idx++

	e.Sex.TransformInplace(dst[idx:idx+e.Sex.NumFeatures()], s.Sex)
	idx += e.Sex.NumFeatures()

	dst[idx] = e.Age.Transform(float64(s.Age))
	idx++

	dst[idx] = e.SibSp.Transform(float64(s.SibSp))
	idx++

	dst[idx] = e.Parch.Transform(float64(s.Parch))
	idx++

	dst[idx] = e.Fare.Transform(float64(s.Fare))
	idx++

	dst[idx] = e.Cabin.Transform((s.Cabin))
	idx++

	e.Embarked.TransformInplace(dst[idx:idx+e.Embarked.NumFeatures()], s.Embarked)
	idx += e.Embarked.NumFeatures()

}

// TransformAll transforms a slice of Passenger
func (e *PassengerFeatureTransformer) TransformAll(s []Passenger) []float64 {
	if e == nil {
		return nil
	}
	features := make([]float64, len(s)*e.NumFeatures())
	e.TransformAllInplace(features, s)
	return features
}

// TransformAllInplace transforms a slice of Passenger inplace
func (e *PassengerFeatureTransformer) TransformAllInplace(dst []float64, s []Passenger) {
	if e == nil {
		return
	}
	n := e.NumFeatures()
	if len(dst) != n*len(s) {
		return
	}
	for i := range s {
		e.TransformInplace(dst[i*n:(i+1)*n], &s[i])
	}
}

// TransformAllParallel transforms a slice of Passenger in parallel
func (e *PassengerFeatureTransformer) TransformAllParallel(s []Passenger, nworkers uint) []float64 {
	if e == nil {
		return nil
	}
	features := make([]float64, len(s)*e.NumFeatures())
	e.TransformAllInplaceParallel(features, s, nworkers)
	return features
}

// TransformAllInplaceParallel transforms a slice of Passenger inplace parallel
// Useful for very large slices.
func (e *PassengerFeatureTransformer) TransformAllInplaceParallel(dst []float64, s []Passenger, nworkers uint) {
	if e == nil || nworkers == 0 {
		return
	}
	ns := uint(len(s))
	nf := uint(e.NumFeatures())
	if uint(len(dst)) != nf*ns {
		return
	}

	nbatch := ns / nworkers
	var wg sync.WaitGroup

	for i := uint(0); i < nworkers; i++ {
		wg.Add(1)
		go func(i uint) {
			defer wg.Done()
			iStart := nbatch * i
			iEnd := nbatch * (i + 1)
			if i == (nworkers - 1) {
				iEnd = ns
			}
			e.TransformAllInplace(dst[iStart*nf:iEnd*nf], s[iStart:iEnd])
		}(i)
	}

	wg.Wait()
}

// NumFeatures returns number of features in output feature vector
func (e *PassengerFeatureTransformer) NumFeatures() int {
	if e == nil {
		return 0
	}

	count := 6

	count += e.Sex.NumFeatures()

	count += e.Embarked.NumFeatures()

	return count
}

// FeatureNames provides names of features that match output of transform
func (e *PassengerFeatureTransformer) FeatureNames() []string {
	if e == nil {
		return nil
	}

	idx := 0
	names := make([]string, e.NumFeatures())

	names[idx] = "PClass"
	idx++

	for _, w := range e.Sex.FeatureNames() {
		names[idx] = "Sex_" + w
		idx++
	}

	names[idx] = "Age"
	idx++

	names[idx] = "SibSp"
	idx++

	names[idx] = "Parch"
	idx++

	names[idx] = "Fare"
	idx++

	names[idx] = "Cabin"
	idx++

	for _, w := range e.Embarked.FeatureNames() {
		names[idx] = "Embarked_" + w
		idx++
	}

	return names
}
